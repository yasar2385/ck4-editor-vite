/**
 * ck4-react\src\hooks\useCollaborativeEditor.js
 * useCollaborativeEditor.jsx
 * Binds CKEditor4Wrapper (GlobalEditor) with collab-ot.jsx (Operational Transform logic)
 */

import { useEffect, useRef } from "react";
import { CollaborativeEditor } from "../plugins/collab-ot";

export default function useCollaborativeEditor(editorInstance, userInfo) {
    const collabRef = useRef(null);

    useEffect(() => {
        if (!editorInstance) return;

        console.log("🧩 [CollabOT] Initializing collaborative editor...");

        // 1️⃣ Create collaborative editor instance (singleton per editor)
        if (!collabRef.current) {
            collabRef.current = new CollaborativeEditor();
        }

        const collab = collabRef.current;
        collab.init(editorInstance);

        // 2️⃣ Identify document & user
        const docId =
            window.DOC_ID ||
            localStorage.getItem("activeDocId") ||
            "sharedDoc-default";
        const userId =
            userInfo?.MAIL_ID ||
            localStorage.getItem("chatUsername") ||
            "GuestUser";

        // 3️⃣ Connect to collaboration WebSocket
        const connected = collab.connect(docId, userId);
        if (connected) {
            console.log(`✅ [CollabOT] Connected → ${userId} editing ${docId}`);
        } else {
            console.warn("⚠️ [CollabOT] Connection failed or dependencies missing");
        }

        // 4️⃣ Cleanup on component unmount
        return () => {
            console.log("🧹 [CollabOT] Disconnecting...");
            collab.disconnect();
        };
    }, [editorInstance, userInfo]);

    // Optional helpers
    const sendCustomMessage = (payload) => {
        if (
            collabRef.current?.ws &&
            collabRef.current.ws.readyState === WebSocket.OPEN
        ) {
            collabRef.current.ws.send(JSON.stringify(payload));
        }
    };

    return {
        get editor() {
            return collabRef.current?.editor || null;
        },
        get isConnected() {
            return collabRef.current?.isConnected || false;
        },
        sendCustomMessage,
    };
}
